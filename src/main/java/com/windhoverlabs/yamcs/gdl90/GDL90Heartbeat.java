package com.windhoverlabs.yamcs.gdl90;

import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import org.yamcs.tctm.ccsds.error.Crc16Calculator;

public class GDL90Heartbeat {
  byte FlagByte = 0x7E;

  // Payload
  /**********/
  //	First Byte
  private byte MessageID = 0x00;
  //	Second Byte
  public boolean GPSPosValid, MaintRquired, INDENT, AddrType, GPSBattLow, RATCS, UATInitialized;

  // Third Byte
  public boolean TimeStampStatus, CSARequested, CSANotAvailable, UTCOK;

  // Fourth and Fifth bytes
  short TimeStamp;
  //	Sixth and Seventh bytes
  short MesssageCounts;

  /**********/

  int[] crcTable = {
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108,
    0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210,
    0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b,
    0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401,
    0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee,
    0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6,
    0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d,
    0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5,
    0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc,
    0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4,
    0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd,
    0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13,
    0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a,
    0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e,
    0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1,
    0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb,
    0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0,
    0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8,
    0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657,
    0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9,
    0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882,
    0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,
    0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e,
    0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07,
    0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d,
    0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74,
    0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,
  };

  static final String JDK_BUILTIN_NASHORN_ENGINE_NAME = "Oracle Nashorn";

  byte[] testSample = {
    0x7e,
    0x00,
    (byte) 0x81,
    0x01,
    (byte) 0xad,
    (byte) 0xa9,
    (byte) 0x00,
    (byte) 0x00,
    (byte) 0x5d,
    (byte) 0xd3,
    0x7e
  };

  public byte[] toBytes() {
    byte[] data = new byte[11];
    byte GPSPosValidByte = 1;
    if (GPSPosValid) {
      GPSPosValidByte = (byte) (GPSPosValidByte | (byte) (1 << 7));
    }
    System.out.println("toBytes2");
    data[1] = MessageID;

    byte[] crcTestSample = {
      0x7e,
      0x00,
      (byte) 0x81,
      0x01,
      (byte) 0xad,
      (byte) 0xa9,
      (byte) 0x00,
      (byte) 0x00,
      (byte) 0x5d,
      (byte) 0xd3,
      0x7e
    };
    //    byte[] sampleMessage = {
    //      0x00, (byte) 0x81, 0x41, (byte) 0xD0, (byte) 0xDB, 0x08, 0x02,
    //    };

    int[] sampleMessage = {0x00, 0x01, 0x01, 0xD9, 0x42, 0x00, 0x00};

    //    byte[] sampleMessage = {
    //      0x00, (byte) 0x01, 0x01, (byte) 0xD0, (byte) 0x3E, 0x00, 0x00,
    //    };

    //    7e 00 01 01 d0 3e 00 00 3e 83 7e

    //    byte[] sampleMessage = {
    //    	       (byte) 0x81, 0x41, (byte) 0xD0, (byte) 0xDB, 0x02, 0x08,
    //    	    };
    System.out.println("toBytes3");
    //    int heartBeatCrc = com.windhoverlabs.yamcs.gdl90.CrcTable.crc16_ccitt(crcTestSample, 1,
    // 7);
    int heartBeatCrc = 0;
    System.out.println("toBytes4");

    Crc16Calculator cc = new Crc16Calculator(0x1021);
    //    heartBeatCrc =  cc.compute(sampleMessage, 0, sampleMessage.length, 0);

    heartBeatCrc = crcCompute(sampleMessage);

    //    System.out.println("Java CRC:" + crcCompute(sampleMessage));

    System.out.println("heartBeatCrc:" + (String.format("0x%08X", heartBeatCrc)));
    //    The offset for the checksum will have to be calculated based on payload size which
    // can vary if FlagByte needs to be escaped

    //    crcTestSample = ByteArrayUtils.encodeUnsignedShort(heartBeatCrc, crcTestSample, 8);

    System.out.println("toBytes5");

    data[0] = FlagByte;
    data[10] = FlagByte;

    //    byte[] crcTestSample = {
    //    	    0x7e,
    //    	    0x00,
    //    	    (byte) 0x81,
    //    	    0x01,
    //    	    (byte) 0xad,
    //    	    (byte) 0xa9,
    //    	    (byte) 0x00,
    //    	    (byte) 0x00,
    //    	    (byte) 0x5d,
    //    	    (byte) 0xd3,
    //    	    0x7e
    //    	  };

    //    byte[] crcTest = ByteArrayUtils.encodeUnsignedShort(heartBeatCrc, data, 8);

    //    return testSample;

    System.out.println("toBytes6");

    executeSimpleJS();

    return crcTestSample;
  }

  // ----------------- 2 bytes(short) encoding/decoding
  public static byte[] encodeUnsignedShortBE(int x, byte[] a, int offset) {

    a[offset] = (byte) (x >> 8);
    a[offset + 1] = (byte) (x);

    return a;
  }

  public void executeSimpleJS() {
    //      ScriptEngineManager scriptEngineManager = new ScriptEngineManager();
    ////      scriptEngineManager.put("Yamcs", new
    // AlgorithmFunctions(algorithmManager.getProcessor(), context));
    //      ScriptEngineFactory factory = scriptEngineManager.getEngineFactories().stream()
    //              .filter(candidate ->
    // !JDK_BUILTIN_NASHORN_ENGINE_NAME.equals(candidate.getEngineName())
    //                      && candidate.getNames().contains("JavaScript"))
    //              .findFirst()
    //              .orElse(null);
    ScriptEngineManager manager = new ScriptEngineManager();
    ScriptEngine engine = manager.getEngineByName("nashorn");
    // evaluate JavaScript code
    try {
      //      engine.eval("print('Hello, World')");

      // evaluate JavaScript code that defines a function with one parameter
      engine.eval(
          ""
              + "crcTable = [\n"
              + "	0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108,\n"
              + "	0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210,\n"
              + "	0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b,\n"
              + "	0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401,\n"
              + "	0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee,\n"
              + "	0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6,\n"
              + "	0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d,\n"
              + "	0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,\n"
              + "	0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5,\n"
              + "	0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc,\n"
              + "	0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4,\n"
              + "	0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd,\n"
              + "	0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13,\n"
              + "	0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a,\n"
              + "	0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e,\n"
              + "	0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,\n"
              + "	0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1,\n"
              + "	0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb,\n"
              + "	0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0,\n"
              + "	0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8,\n"
              + "	0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657,\n"
              + "	0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9,\n"
              + "	0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882,\n"
              + "	0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,\n"
              + "	0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e,\n"
              + "	0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07,\n"
              + "	0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d,\n"
              + "	0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74,\n"
              + "	0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,\n"
              + "];"
              + "sampleMessage = [0x00, 0x01, 0x01, 0xD9, 0x42, 0x00, 0x00];"
              + "function crc16_ccitt(data) {\n"
              + "	mask16bit = 0xffff;\n"
              + "\n"
              + "	 crc = 0;\n"
              + "	 i = 0;\n"
              + "\n"
              + "print('Hello, from  crc16_ccitt' + data);"
              + "	for (c in data) {\n"
              + "		 m = (crc << 8) & mask16bit;\n"
              + "		crc = crcTable[crc >> 8] ^ m ^ c;\n"
              + "	}\n"
              + "\n"
              + "	return crc;\n"
              + "}"
              + "function crc16(bytes) { print('Hello, ' + bytes);"
              + "print('crc_16***:' + crc16_ccitt(sampleMessage)) }");

      // create an Invocable object by casting the script engine object
      Invocable inv = (Invocable) engine;

      // invoke the function named "hello" with "Scripting!" as the argument
      inv.invokeFunction("crc16", "Scripting!");
    } catch (ScriptException | NoSuchMethodException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
  }

  int crc16_ccitt(byte[] data) {
    int mask16bit = 0xffff;

    int crc = 0;
    //		int i = 0;

    for (byte c : data) {
      int m = (crc << 8) & mask16bit;
      crc = crcTable[crc >> 8] ^ m ^ c;
    }

    return crc;
  }

  public int crcCompute(int[] buffer) {
    int mask16bit = 0xffff;

    int crc = 0;
    int i = 0;
    for (int c : buffer) {
      int m = (crc << 8) & mask16bit;
      //      System.out.println("c:" + (c & 0xFF));
      //      System.out.println("m:" + m);
      //      System.out.println("crc >> 8:" + ((byte) (crc >> 8)));
      //      System.out.println("crc:" + crc);
      ////      if ((crc >> 8) == -18)
      ////      {
      ////
      ////      }
      ////      else {
      ////    	  crc = crcTable[crc >> 8] ^ m ^ c;
      ////      }

      crc = crcTable[crc >> 8] ^ m ^ c;
    }
    return crc;
  }
}
